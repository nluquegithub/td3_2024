ARM GAS  src/bubble_sort.s 			page 1


   1              	// bubble_sort 2024.05.26
   2              	/*
   3              	Escribir un código en ensamblador capaz de ordenar un array de enteros. 
   4              	Para ello generar un espacio de 10 enteros inicializados y un espacio de 10 enteros para ubicar 
   5              	el resultado ordenado. */
   6              	
   7              	/* Simbolos de direcciones definidas externamente en otro archivo o en linker_script */
   8              	.extern __KERNEL_START_VMA      // PUNTERO_DESTINO
   9              	.extern __KERNEL_START_LMA      // PUNTERO_FUENTE
  10              	.extern __KERNEL_SIZE           // CANT_BYTES a copiar
  11              	.extern __PILA_SIZE    
  12              	.extern __BSS_SIZE      
  13              	
  14              	/* Explicitamos símbolos globales para que puedan ser vistos por otros archivos y por el mapa de m
  15              	.global _start
  16              	
  17              	/*-------------------------------------------------------------------------------------------------
  18              	
  19              	.section .memcpy_asm, "ax"            // Comienzo de seccion, no usamos ".text", que es lo mismo qu
  20              	                                // "ax" son progbits flags para indicar que la seccion es "a" alloc
  21              	_start:                         // Simbolo que le indica al linker donde arranca el programa.
  22              	
  23 0000 28009FE5 	        LDR R0, =__KERNEL_START_VMA             // PUNTERO_DESTINO
  24 0004 28109FE5 	        LDR R1, =__KERNEL_START_LMA             // PUNTERO_FUENTE
  25 0008 28209FE5 	        LDR R2, =__KERNEL_SIZE                  // CANT_BYTES a copiar
  26              	
  27 000c 000000EB 	        BL memcpy_byte
  28              	        @ BL clear_bss          // #TODO agregar una rutina de clear_bss para asegurar de poner esa
  29 0010 FEFFFFEA 	        B bubble_sort             /* saltar al codigo de la section a ejecutar en VMA */
  30              	
  31              	memcpy_byte:
  32 0014 000052E3 	        CMP R2, #0
  33 0018 0300000A 	        BEQ memcpy_end
  34              	memcpy_loop:
  35 001c 0130D1E4 	        LDRB R3, [R1], #1
  36 0020 0130C0E4 	        STRB R3, [R0], #1
  37 0024 012052E2 	        SUBS R2, R2, #1
  38 0028 FBFFFF1A 	        BNE memcpy_loop
  39              	memcpy_end:
  40 002c 1EFF2FE1 	        BX LR //r14
  41              	
  42              	// #TODO agregar una rutina de clear_bss para asegurar de poner esa zona de memoria en ceros
  43              	
  44              	/*-------------------------------------------------------------------------------------------------
  45              	.section .kernel, "ax"
  46              	
  47              	
  48              	bubble_sort:                            // ordenar 10 enteros, asumimos que el orden deseado es asc
  49 0000 8C009FE5 	        LDR R0, =variables_no_init      // puntero donde volcar el array ordenado
  50 0004 8C109FE5 	        LDR R1, =variables_init         // puntero a array desordenado
  51 0008 2820A0E3 	        MOV R2, #40                     // cant de elementos a ordenar (*4 para ser words)
  52 000c 030000EB 	        BL memcpy_byte                  // copiamos al destino aunque este desordenado
  53              	
  54              	bubble_start:
  55 0010 7C009FE5 	        LDR R0, =variables_no_init      // R0 = index_0 del array a ordenar
  56 0014 041080E2 	        ADD R1, R0, #4                  // R1 = index_1, los siguientes 4 bytes es el siguiente wor
  57 0018 0920A0E3 	        MOV R2, #9                      // R2 es la cant de pasadas por el array, revisando sus com
ARM GAS  src/bubble_sort.s 			page 2


  58 001c 0930A0E3 	        MOV R3, #9                      // R3 es la cant de comparaciones entre 2 elementos interno
  59 0020 0070A0E3 	        MOV R7, #0      @ R7 sirve para contar y detectar si hubo swap en la pasada
  60 0024 0080A0E3 	        MOV R8, #0      @ R8 acumulara el total de swaps
  61              	        /* #FIXME 
  62              	                [x] falta contar con r3, como contador interno de elementos, con cada comparacion r
  63              	                [x] falta contar con r2, como contador externo de pasadas, cuando r3==0, recargar r
  64              	                [ ] para asegurar los registros, agregar al inicio y fin el push y pop a la pila
  65              	                [ ] debug
  66              	        */
  67              	
  68              	
  69              	compare:
  70 0028 005090E5 	        LDR R5, [R0]                    // cargo lo apuntado a otros registros auxiliares
  71 002c 006091E5 	        LDR R6, [R1]    
  72 0030 060055E1 	        CMP R5, R6                      // CMP [R1], [R0] no se puede acceder con el puntero. CMP <
  73 0034 0E0000CA 	        BGT swap_values                 // *R0 > *R1, hay que cambiarlos de lugar
  74              	
  75              	next_in:                                // *R0 < *R1, ok entonces me preparo para la siguiente comp
  76 0038 013053E2 	        SUBS R3, R3, #1                 // decremento el contador interno
  77 003c 0200000A 	        BEQ next_out                    // R3 quedo en cero, asi que se completo una pasada por el 
  78              	next_in_set:                            // R3 no quedo en cero, sigo dentro de la pasada actual
  79 0040 040080E2 	        ADD R0, R0, #4                  // incrementar el puntero R0, elemento izq de la siguiente 
  80 0044 041081E2 	        ADD R1, R1, #4                  // incrementar el puntero R1, elemento der de la siguiente 
  81 0048 F6FFFFEA 	        B compare       
  82              	
  83              	next_out:                               // R3 quedo en cero, tengo que prepararme para la siguiente
  84 004c 000057E3 	        CMP R7, #0              @ si, R7==0 no hubo swaps, y termino una pasada, asumimos que quedo
  85 0050 0E00000A 	        BEQ bubble_end
  86 0054 078088E0 	        ADD R8, R8, R7          @ agregamos los R7 swaps de esta pasada que termino, al R8 acumulad
  87 0058 012052E2 	        SUBS R2, R2, #1                 // decremento el contador externo
  88 005c 0B00000A 	        BEQ bubble_end                  // R2 quedo en cero, asi que termino todas las pasadas por 
  89              	next_out_set:                           // R2 no quedo en cero, preparo los valores para la siguien
  90 0060 2C009FE5 	        LDR R0, =variables_no_init      // recargo R0 con el valor inicial
  91 0064 041080E2 	        ADD R1, R0, #4                  // recargo R1 con el valor inicial
  92 0068 0230A0E1 	        MOV R3, R2                      // recargo R3, pero no con el mismo valor inicial, ahora se
  93 006c 0070A0E3 	        MOV R7, #0
  94 0070 ECFFFFEA 	        B compare
  95              	
  96              	swap_values:
  97 0074 0640A0E1 	        MOV R4, R6                      // R4  el aux para pivotear valores del swap
  98 0078 0560A0E1 	        MOV R6, R5
  99 007c 0450A0E1 	        MOV R5, R4
 100              	        /* valores auxiliares cambiados, ahora escribo en la memoria */
 101 0080 005080E5 	        STR R5, [R0]
 102 0084 006081E5 	        STR R6, [R1]
 103 0088 017087E2 	        ADD R7, R7, #1
 104 008c E9FFFFEA 	        B next_in                       // me preparo para la siguiente comparacion
 105              	
 106              	bubble_end:
 107 0090 FEFFFFEA 	        B .
 108              	
 109              	
 110              	
 111              	/*-------------------------------------------------------------------------------------------------
 112              	.section .data   // Seccion de datos inicializados.
 113              	
 114              	variables_init:
ARM GAS  src/bubble_sort.s 			page 3


 115              	        @ .space =__DATA_SIZE
 116 0000 01000000 	        .word 1, 3, 2, 8, 9, 10, 5, 6, 4, 7      // 10 elementos enteros inicializados, desordenado
 116      03000000 
 116      02000000 
 116      08000000 
 116      09000000 
 117              	/*-------------------------------------------------------------------------------------------------
 118              	.section .bss   // Seccion de datos no inicializados.
 119              	
 120              	variables_no_init:
 121              	        .space =__BSS_SIZE
 122              	
 123              	/*-------------------------------------------------------------------------------------------------
 124              	.section .pila
 125              	_pila:
 126              	        .space =__PILA_SIZE        // Reservar una palabra para guardar el factorial.
 127              	                              /* el .space es como "saltearse" de a bytes, en este caso 4 bytes,
 128              	                              como reservar espacio para algo,
 129              	                              que en nuestro ejemplo es como reservar una variable vacia */
ARM GAS  src/bubble_sort.s 			page 4


DEFINED SYMBOLS
   src/bubble_sort.s:21     .memcpy_asm:0000000000000000 _start
   src/bubble_sort.s:23     .memcpy_asm:0000000000000000 $a
   src/bubble_sort.s:31     .memcpy_asm:0000000000000014 memcpy_byte
   src/bubble_sort.s:48     .kernel:0000000000000000 bubble_sort
   src/bubble_sort.s:39     .memcpy_asm:000000000000002c memcpy_end
   src/bubble_sort.s:34     .memcpy_asm:000000000000001c memcpy_loop
   src/bubble_sort.s:120    .bss:0000000000000000 variables_no_init
   src/bubble_sort.s:49     .kernel:0000000000000000 $a
   src/bubble_sort.s:114    .data:0000000000000000 variables_init
   src/bubble_sort.s:54     .kernel:0000000000000010 bubble_start
   src/bubble_sort.s:69     .kernel:0000000000000028 compare
   src/bubble_sort.s:96     .kernel:0000000000000074 swap_values
   src/bubble_sort.s:75     .kernel:0000000000000038 next_in
   src/bubble_sort.s:83     .kernel:000000000000004c next_out
   src/bubble_sort.s:78     .kernel:0000000000000040 next_in_set
   src/bubble_sort.s:106    .kernel:0000000000000090 bubble_end
   src/bubble_sort.s:89     .kernel:0000000000000060 next_out_set
   src/bubble_sort.s:125    .pila:0000000000000000 _pila
   src/bubble_sort.s:129    .kernel:0000000000000094 $d
   src/bubble_sort.s:129    .memcpy_asm:0000000000000030 $d

UNDEFINED SYMBOLS
__KERNEL_START_VMA
__KERNEL_START_LMA
__KERNEL_SIZE
__BSS_SIZE
__PILA_SIZE
