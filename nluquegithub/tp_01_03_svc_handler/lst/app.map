
Memory Configuration

Name             Origin             Length             Attributes
vector_rom       0x0000000000000000 0x0000000000010000
public_rom       0x0000000070010000 0x0000000000010000
public_ram       0x0000000070030000 0x0000000000010000
public_stack     0x0000000070020000 0x0000000000010000
microKernel_vma  0x0000000070040000 0x0000000000010000
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

                0x0000000000000000                __VECTOR_TABLE_BASE = 0x0
                0x0000000070010000                __PUBLIC_ROM_INIT = 0x70010000
                0x0000000070020000                __PUBLIC_STACK_INIT = 0x70020000
                0x0000000070030000                __PUBLIC_RAM_INIT = 0x70030000
                0x0000000070040000                __KERNEL_START_VMA = 0x70040000
                0x0000000000001000                __SYS_STACK_SIZE = 0x1000
                0x0000000000001000                __IRQ_STACK_SIZE = 0x1000
                0x0000000000001000                __FIQ_STACK_SIZE = 0x1000
                0x0000000000001000                __SVC_STACK_SIZE = 0x1000
                0x0000000000001000                __ABT_STACK_SIZE = 0x1000
                0x0000000000001000                __UND_STACK_SIZE = 0x1000
                0x0000000000001000                __GAP_SIZE = 0x1000
                0x0000000070030000                . = __PUBLIC_RAM_INIT

.memcpy_out     0x0000000070010000       0x74
 *(.memcpy_asm)
 .memcpy_asm    0x0000000070010000       0x74 obj/_start_memcpy.o
                0x0000000070010000                _start
                0x0000000070010038                memcpy

.vector_table_out
                0x0000000000000000       0x34 load address 0x0000000070010074
                0x0000000000000000                __VECTOR_TABLE_START_VMA = .
 *(.vector_table)
 .vector_table  0x0000000000000000       0x34 obj/vector_table.o
                0x0000000000000000                Vector_Table
                0x000000000000001c                FIQ_Handler
                0x0000000000000034                __VECTOR_TABLE_END_VMA = .
                0x0000000000000034                __VECTOR_TABLE_SIZE = SIZEOF (.vector_table_out)
                0x0000000070010074                __VECTOR_TABLE_START_LMA = LOADADDR (.vector_table_out)

.reset_out      0x0000000070030000       0xa0 load address 0x00000000700100a8
                0x0000000070030000                __RESET_START_VMA = .
 *(.reset)
 .reset         0x0000000070030000       0xa0 obj/reset.o
                0x0000000070030000                Reset_Handler
                0x00000000700300a0                __RESET_END_VMA = .
                0x00000000000000a0                __RESET_SIZE = SIZEOF (.reset_out)
                0x00000000700100a8                __RESET_START_LMA = LOADADDR (.reset_out)

.kernel_out     0x0000000070040000      0x160 load address 0x0000000070010148
                0x0000000070040000                . = ALIGN (0x4)
                0x0000000070040000                __HANDLERS_START_VMA = .
 *(.exception_handlers)
 .exception_handlers
                0x0000000070040000       0x9c obj/handler_svc.o
                0x0000000070040000                SVC_Handler
                0x0000000070040088                Undefined_Handler
                0x000000007004008c                Prefetch_Handler
                0x0000000070040090                Abort_Handler
                0x0000000070040094                IRQ_Handler
                0x000000007004009c                __HANDLERS_END_VMA = .
                0x000000007004009c                . = ALIGN (0x4)
 *(.kernel_1)
 .kernel_1      0x000000007004009c        0xc obj/kernel.o
                0x000000007004009c                Inicializado
 *(.kernel_2)
 .kernel_2      0x00000000700400a8       0xb8 obj/bubble_sort.o
                0x00000000700400a8                bubble_sort
                0x0000000070040160                __KERNEL_END_VMA = .
                0x0000000000000160                __KERNEL_SIZE = SIZEOF (.kernel_out)
                0x0000000070010148                __KERNEL_START_LMA = LOADADDR (.kernel_out)

.glue_7         0x0000000070040160        0x0 load address 0x00000000700102a8
 .glue_7        0x0000000070040160        0x0 linker stubs

.glue_7t        0x0000000070040160        0x0 load address 0x00000000700102a8
 .glue_7t       0x0000000070040160        0x0 linker stubs

.vfp11_veneer   0x0000000070040160        0x0 load address 0x00000000700102a8
 .vfp11_veneer  0x0000000070040160        0x0 linker stubs

.v4_bx          0x0000000070040160        0x0 load address 0x00000000700102a8
 .v4_bx         0x0000000070040160        0x0 linker stubs

.text           0x0000000070040160        0x0 load address 0x00000000700102a8
 .text          0x0000000070040160        0x0 obj/bubble_sort.o
 .text          0x0000000070040160        0x0 obj/handler_svc.o
 .text          0x0000000070040160        0x0 obj/kernel.o
 .text          0x0000000070040160        0x0 obj/reset.o
 .text          0x0000000070040160        0x0 obj/vector_table.o
 .text          0x0000000070040160        0x0 obj/_start_memcpy.o

.iplt           0x0000000070040160        0x0 load address 0x00000000700102a8
 .iplt          0x0000000070040160        0x0 obj/bubble_sort.o

.rel.dyn        0x0000000070040160        0x0 load address 0x00000000700102a8
 .rel.iplt      0x0000000070040160        0x0 obj/bubble_sort.o

.data           0x00000000700300a0       0x28
 *(.data*)
 .data          0x00000000700300a0       0x28 obj/bubble_sort.o
 .data          0x00000000700300c8        0x0 obj/handler_svc.o
 .data          0x00000000700300c8        0x0 obj/kernel.o
 .data          0x00000000700300c8        0x0 obj/reset.o
 .data          0x00000000700300c8        0x0 obj/vector_table.o
 .data          0x00000000700300c8        0x0 obj/_start_memcpy.o

.igot.plt       0x00000000700300c8        0x0
 .igot.plt      0x00000000700300c8        0x0 obj/bubble_sort.o

.bss            0x00000000700300c8       0x28
                0x00000000700300c8                . = ALIGN (0x4)
                0x00000000700300c8                __bss_start__ = .
 *(.bss*)
 .bss           0x00000000700300c8       0x28 obj/bubble_sort.o
 .bss           0x00000000700300f0        0x0 obj/handler_svc.o
 .bss           0x00000000700300f0        0x0 obj/kernel.o
 .bss           0x00000000700300f0        0x0 obj/reset.o
 .bss           0x00000000700300f0        0x0 obj/vector_table.o
 .bss           0x00000000700300f0        0x0 obj/_start_memcpy.o
                0x00000000700300f0                __bss_end__ = .

.stacks_out     0x0000000070020000     0xc000
                0x0000000070020000                . = ALIGN (0x4)
                0x0000000070020000                __ARM_STACKS_START_VMA = .
                0x0000000070020000                __SYS_STACK_START = .
                0x0000000070021000                . = (. + __SYS_STACK_SIZE)
 *fill*         0x0000000070020000     0x1000 
                0x0000000070021000                __SYS_STACK_END = .
                0x0000000070022000                . = (. + __GAP_SIZE)
 *fill*         0x0000000070021000     0x1000 
                0x0000000070022000                __IRQ_STACK_START = .
                0x0000000070023000                . = (. + __IRQ_STACK_SIZE)
 *fill*         0x0000000070022000     0x1000 
                0x0000000070023000                __IRQ_STACK_END = .
                0x0000000070024000                . = (. + __GAP_SIZE)
 *fill*         0x0000000070023000     0x1000 
                0x0000000070024000                __FIQ_STACK_START = .
                0x0000000070025000                . = (. + __FIQ_STACK_SIZE)
 *fill*         0x0000000070024000     0x1000 
                0x0000000070025000                __FIQ_STACK_END = .
                0x0000000070026000                . = (. + __GAP_SIZE)
 *fill*         0x0000000070025000     0x1000 
                0x0000000070026000                __SVC_STACK_START = .
                0x0000000070027000                . = (. + __SVC_STACK_SIZE)
 *fill*         0x0000000070026000     0x1000 
                0x0000000070027000                __SVC_STACK_END = .
                0x0000000070028000                . = (. + __GAP_SIZE)
 *fill*         0x0000000070027000     0x1000 
                0x0000000070028000                __ABT_STACK_START = .
                0x0000000070029000                . = (. + __ABT_STACK_SIZE)
 *fill*         0x0000000070028000     0x1000 
                0x0000000070029000                __ABT_STACK_END = .
                0x000000007002a000                . = (. + __GAP_SIZE)
 *fill*         0x0000000070029000     0x1000 
                0x000000007002a000                __UND_STACK_START = .
                0x000000007002b000                . = (. + __UND_STACK_SIZE)
 *fill*         0x000000007002a000     0x1000 
                0x000000007002b000                __UND_STACK_END = .
                0x000000007002c000                . = (. + __GAP_SIZE)
 *fill*         0x000000007002b000     0x1000 
                0x000000007002c000                __ARM_STACKS_END_VMA = .
                0x000000000000c000                __ARM_STACKS_SIZE = SIZEOF (.stacks_out)
                0x0000000070020000                __ARM_STACKS_START_LMA = LOADADDR (.stacks_out)
LOAD obj/bubble_sort.o
LOAD obj/handler_svc.o
LOAD obj/kernel.o
LOAD obj/reset.o
LOAD obj/vector_table.o
LOAD obj/_start_memcpy.o
OUTPUT(bin/app.elf elf32-littlearm)

.ARM.attributes
                0x0000000000000000       0x16
 .ARM.attributes
                0x0000000000000000       0x16 obj/bubble_sort.o
 .ARM.attributes
                0x0000000000000016       0x16 obj/handler_svc.o
 .ARM.attributes
                0x000000000000002c       0x14 obj/kernel.o
 .ARM.attributes
                0x0000000000000040       0x14 obj/reset.o
 .ARM.attributes
                0x0000000000000054       0x14 obj/vector_table.o
 .ARM.attributes
                0x0000000000000068       0x14 obj/_start_memcpy.o

.debug_line     0x0000000000000000      0x229
 .debug_line    0x0000000000000000       0x73 obj/bubble_sort.o
 .debug_line    0x0000000000000073       0x66 obj/handler_svc.o
 .debug_line    0x00000000000000d9       0x3e obj/kernel.o
 .debug_line    0x0000000000000117       0x69 obj/reset.o
 .debug_line    0x0000000000000180       0x48 obj/vector_table.o
 .debug_line    0x00000000000001c8       0x61 obj/_start_memcpy.o

.debug_info     0x0000000000000000      0x2c2
 .debug_info    0x0000000000000000       0x77 obj/bubble_sort.o
 .debug_info    0x0000000000000077       0x77 obj/handler_svc.o
 .debug_info    0x00000000000000ee       0x72 obj/kernel.o
 .debug_info    0x0000000000000160       0x71 obj/reset.o
 .debug_info    0x00000000000001d1       0x78 obj/vector_table.o
 .debug_info    0x0000000000000249       0x79 obj/_start_memcpy.o

.debug_abbrev   0x0000000000000000       0x78
 .debug_abbrev  0x0000000000000000       0x14 obj/bubble_sort.o
 .debug_abbrev  0x0000000000000014       0x14 obj/handler_svc.o
 .debug_abbrev  0x0000000000000028       0x14 obj/kernel.o
 .debug_abbrev  0x000000000000003c       0x14 obj/reset.o
 .debug_abbrev  0x0000000000000050       0x14 obj/vector_table.o
 .debug_abbrev  0x0000000000000064       0x14 obj/_start_memcpy.o

.debug_aranges  0x0000000000000000       0xc0
 .debug_aranges
                0x0000000000000000       0x20 obj/bubble_sort.o
 .debug_aranges
                0x0000000000000020       0x20 obj/handler_svc.o
 .debug_aranges
                0x0000000000000040       0x20 obj/kernel.o
 .debug_aranges
                0x0000000000000060       0x20 obj/reset.o
 .debug_aranges
                0x0000000000000080       0x20 obj/vector_table.o
 .debug_aranges
                0x00000000000000a0       0x20 obj/_start_memcpy.o
