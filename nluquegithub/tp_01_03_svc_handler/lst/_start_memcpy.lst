ARM GAS  src/_start_memcpy.s 			page 1


   1              	// memcpy_bytes.s
   2              	
   3              	/* Symbols de direcciones definidas externamente en otro archivo o en linker_script */
   4              	.extern	__VECTOR_TABLE_BASE
   5              	.extern	__PUBLIC_ROM_INIT
   6              	.extern	__PUBLIC_STACK_INIT
   7              	.extern	__PUBLIC_RAM_INIT
   8              	@ .extern	__KERNEL_START_VMA
   9              	
  10              	.extern	__VECTOR_TABLE_START_VMA
  11              	.extern	__VECTOR_TABLE_START_LMA
  12              	.extern	__VECTOR_TABLE_SIZE
  13              	
  14              	.extern	__RESET_START_VMA
  15              	.extern	__RESET_START_LMA
  16              	.extern	__RESET_SIZE
  17              	
  18              	.extern	__KERNEL_START_VMA
  19              	.extern	__KERNEL_START_LMA
  20              	.extern	__KERNEL_SIZE
  21              	
  22              	.extern	__HANDLERS_START_VMA
  23              	.extern	__HANDLERS_END_VMA
  24              	
  25              	.extern	__SYS_STACK_START
  26              	.extern	__SYS_STACK_SIZE
  27              	.extern	__SYS_STACK_END
  28              	
  29              	.extern	__IRQ_STACK_START
  30              	.extern	__IRQ_STACK_SIZE
  31              	.extern	__IRQ_STACK_END
  32              	
  33              	.extern	__FIQ_STACK_START
  34              	.extern	__FIQ_STACK_SIZE
  35              	.extern	__FIQ_STACK_END
  36              	
  37              	.extern	__SVC_STACK_START
  38              	.extern	__SVC_STACK_SIZE
  39              	.extern	__SVC_STACK_END
  40              	
  41              	.extern	__ABT_STACK_START
  42              	.extern	__ABT_STACK_SIZE
  43              	.extern	__ABT_STACK_END
  44              	
  45              	.extern	__UND_STACK_START
  46              	.extern	__UND_STACK_SIZE
  47              	.extern	__UND_STACK_END
  48              	
  49              	.extern	__GAP_SIZE
  50              	
  51              	/* Explicitamos simbolos globales para que puedan ser vistos por otros archivos y por el mapa de me
  52              	.global _start
  53              	.global memcpy
  54              	
  55              	/*-------------------------------------------------------------------------------------------------
  56              	
  57              	.section .memcpy_asm, "ax"            
ARM GAS  src/_start_memcpy.s 			page 2


  58              	
  59              	_start:
  60              	        @ entry point, es la forma comun de indicar por donde arranca y/o resetea el microprocesado
  61              	
  62              	/*---  aca estamos copiando el vector_table a 0x00.. ya que vimos que qemu no lo estaba haciendo */
  63 0000 48009FE5 		LDR r0, =__VECTOR_TABLE_START_LMA	@ _dir_inicio_data_copiar
  64 0004 48109FE5 		LDR r1, =__VECTOR_TABLE_START_VMA	@ _dir_inicio_data_pegar
  65 0008 48209FE5 		LDR	r2, =__VECTOR_TABLE_SIZE		@ _largo_data_copiar ; inicio + largo = _final_data_copiar
  66 000c FEFFFFEB 		BL	memcpy
  67              	
  68              	/*---  aca estamos copiando el programa entero a la zona donde trabajara desde SRAM */
  69 0010 44009FE5 		LDR r0, =__RESET_START_LMA		@ _dir_inicio_data_copiar
  70 0014 44109FE5 		LDR r1, =__RESET_START_VMA		@ _dir_inicio_data_pegar
  71 0018 44209FE5 		LDR	r2, =__RESET_SIZE		@ _largo_data_copiar ; inicio + largo = _final_data_copiar
  72 001c FEFFFFEB 		BL	memcpy
  73              	        
  74              	/*---  aca estamos copiando el programa entero a la zona donde trabajara desde DRAM */
  75 0020 40009FE5 		LDR r0, =__KERNEL_START_LMA		@ _dir_inicio_data_copiar
  76 0024 40109FE5 		LDR r1, =__KERNEL_START_VMA		@ _dir_inicio_data_pegar
  77 0028 40209FE5 		LDR	r2, =__KERNEL_SIZE		@ _largo_data_copiar ; inicio + largo = _final_data_copiar
  78 002c FEFFFFEB 		BL	memcpy
  79              	
  80              	    @ @ BL clear_bss          // #TODO agregar una rutina de clear_bss para asegurar de poner esa z
  81              	
  82              	
  83              		// SETEAMOS EL LR Y PC para empezar a correr desde la zona de memoria RAM, antes de inicializar lo
  84 0030 28E09FE5 		LDR lr,  =__RESET_START_VMA
  85 0034 24F09FE5 		LDR pc,  =__RESET_START_VMA
  86              	
  87              	
  88              	memcpy:
  89              								    @ tenemos que tener previamente los punteros _inicio_data_copiar en r0, y _inicio_data_p
  90              								    @ asi el bloque de codigo en r0 = _inicio_data_copiar, se copiara en r1 = _inicio_data_p
  91 0038 002082E0 		ADD r2, r2, r0 			    @  r2 = _largo_data_copiar + _inicio_data_copiar
  92              		fast_copy:
  93 003c F807B0E8 			LDMIA	r0!, {r3 - r10}	@ load memory increment after. carga lo que hay desde r0 inclusive a r3 , l
  94              									@ hasta cargar en r10, = desde la pos r0 cargar 8*4bytes, o sea lo que esta en r0 y los sig
  95 0040 F807A1E8 			STMIA	r1!, {r3 - r10}	@ store memory increment after, al final de todo en r0 quedo el ultimo valo
  96 0044 020050E1 			CMP	r0, r2 				@ compara la ultima direccion de copia que quedo en r0, contra el contenido de r2 
  97 0048 FBFFFFDA 			BLE	fast_copy
  98 004c 0EF0A0E1 		MOV	pc, lr                  @ volvemos al branch with link BL que lo llamo
  98      00000000 
  98      00000000 
  98      00000000 
  98      00000000 
ARM GAS  src/_start_memcpy.s 			page 3


DEFINED SYMBOLS
 src/_start_memcpy.s:59     .memcpy_asm:0000000000000000 _start
 src/_start_memcpy.s:88     .memcpy_asm:0000000000000038 memcpy
 src/_start_memcpy.s:63     .memcpy_asm:0000000000000000 $a
 src/_start_memcpy.s:92     .memcpy_asm:000000000000003c fast_copy
 src/_start_memcpy.s:98     .memcpy_asm:0000000000000050 $d

UNDEFINED SYMBOLS
__VECTOR_TABLE_START_LMA
__VECTOR_TABLE_START_VMA
__VECTOR_TABLE_SIZE
__RESET_START_LMA
__RESET_START_VMA
__RESET_SIZE
__KERNEL_START_LMA
__KERNEL_START_VMA
__KERNEL_SIZE
